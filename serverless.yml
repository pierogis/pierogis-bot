service: pierogis-bot
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
        - 'sqs:SendMessageBatch'
      Resource:
        Fn::GetAtt:
          - BatchRequestsQueue
          - Arn
  deploymentBucket:
    name: pierogis.live

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  pollMentions:
    handler: pierogis_bot.bot.poll_mentions
    #    events:
    #      - schedule: rate(1 minute)
    environment:
      BATCH_REQUESTS_QUEUE_URL:
        Ref: BatchRequestsQueue
  cookRecipe:
    handler: pierogis_bot.bot.cook_recipe


stepFunctions:
  stateMachines:
    batchRecipesMachine:
      events:
        - sns:
      definition:
        Comment: "Workflow for cooking recipes from a batch request in parallel and executing a reply action"
        StartAt: CookRecipes
        States:
          CookRecipes:
            Type: Map
            MaxConcurrency: 0
            ItemsPath: $.recipes
            Iterator:
              StartAt: DownloadIngredient
              States:
                DownloadIngredient:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  Parameters:
                    QueueUrl:
                      Fn::GetAtt: [downloadMediaQueue, Arn]
                    Payload:
                      $.url: $.pierogi.url
                  Next: CookRecipe
                CookRecipe:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [cook-Recipe, Arn]
                  Parameters:
                    FunctionName: arn:aws:lambda:REGION:ACCOUNT_ID:function:cook_recipe
                    Payload:
                      $.path: $
                  End: true
            Next: Reply Tweet
          Reply Tweet:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: arn:aws:lambda:REGION:ACCOUNT_ID:function:reply_tweet
              Payload:
                Input.$: $
            End: true

      dependsOn: CustomIamRole
      tags:
        Team: Atlantis
        metrics:
          - executionsTimedOut
          - executionsFailed
          - executionsAborted
          - metric: executionThrottled
            treatMissingData: breaching # overrides below default
          - executionsSucceeded
        treatMissingData: ignore # optional
    activities:
      - myTask
      - yourTask
    validate: true # enable pre-deployment definition validation (disabled by default)

# you can add CloudFormation resource templates here
resources:
  Resources:
    downloadMediaQueue:
      Type: AWS::SQS::Queue
        Properties:
          QueueName: downloadMediaQueue
    processPierogiQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: processPierogiQueue
#    TweetsMediaQueue:
#      Type: AWS::SQS::Queue
#      Properties:
#        QueueName: pierogis-bot-tweets-media

plugins:
  - serverless-python-requirements
  - serverless-step-functions

useDotenv: true