service: pierogis-bot
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

useDotenv: true

provider:
  name: aws
  runtime: python3.8
#  iamRoleStatements:
#    - Effect: 'Allow'
#      Action:
#        - 'sqs:SendMessage'
#        - 'sqs:SendMessageBatch'
#      Resource:
#        Fn::GetAtt:
#          - BatchRequestsQueue
#          - Arn
  deploymentBucket:
    name: pierogis.live

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  pollMentions:
    handler: pierogis_bot.bot.poll_mentions
    #    events:
    #      - schedule: rate(1 minute)
    environment:
      BATCH_R_REQUESTS_QUEUE_URL:
        Ref: recipesBatchRequestsTopic
  downloadRecipe:
    handler: pierogis_bot.bot.download_recipe
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - downloadRecipeQueue
              - Arn
  cookRecipe:
    handler: pierogis_bot.bot.cook_recipe
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - cookRecipeQueue
              - Arn
  replyTweet:
    handler: pierogis_bot.bot.reply_tweet
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - replyTweetQueue
              - Arn

stepFunctions:
  stateMachines:
    batchRecipesMachine:
      events:
        - sns:
            Ref: recipesBatchRequestsTopic
      definition:
        Comment: "Workflow for cooking recipes from a batch request in parallel and executing a reply action"
        StartAt: CookRecipesBatch
        States:
          CookRecipesBatch:
            Type: Map
            MaxConcurrency: 0
            ItemsPath: $.recipes
            Iterator:
              StartAt: DownloadRecipe
              States:
                DownloadRecipe:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  Parameters:
                    QueueUrl:
                      Fn::GetAtt: [ downloadRecipeQueue, Arn ]
                    MessageBody.$: $.input
                  Next: CookRecipe
                CookRecipe:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  Parameters:
                    QueueUrl:
                      Fn::GetAtt: [ cookRecipeQueue, Arn ]
                    MessageBody: $.input
                  End: true
            Next: Reply Tweet
          Reply Tweet:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl:
                Fn::GetAtt: [ replyTweetQueue, Arn ]
              MessageBody.$: $.input
            End: true
  validate: true # enable pre-deployment definition validation (disabled by default)

# you can add CloudFormation resource templates here
resources:
  Resources:
    recipesBatchRequestsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: recipesBatchRequestsTopic
    downloadRecipeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: downloadRecipeQueue
    cookRecipeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: cookRecipeQueue
    replyTweetQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: replyTweetQueue

plugins:
  - serverless-python-requirements
  - serverless-step-functions
