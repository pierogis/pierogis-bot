service: pierogis-bot
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

useDotenv: true

provider:
  name: aws
  runtime: python3.8
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:PutObject'
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${env:ORDERS_BUCKET}
            - "/*"
    - Effect: 'Allow'
      Action:
        - 'states:SendTaskSuccess'
      Resource:
        Ref: Chef
  deploymentBucket:
    name: ${env:ORDERS_BUCKET}
  environment:
    OAUTH_CONSUMER_KEY: ${env:OAUTH_CONSUMER_KEY}
    OAUTH_CONSUMER_SECRET: ${env:OAUTH_CONSUMER_SECRET}
    BEARER_TOKEN: ${env:BEARER_TOKEN}
    MEAL_REQUESTS_BUCKET: ${env:MEAL_REQUESTS_BUCKET}

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  PollMentions:
    handler: handler.poll_mentions
    #    events:
    #      - schedule: rate(1 minute)
    environment:
      CHEF_ARN:
        Ref: Chef
      USER_ID: ${env:USER_ID}
      TWEET_ORDER_TABLE:
        Ref: TweetOrderTable
  DownloadIngredients:
    handler: handler.download_ingredients
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DownloadIngredientsQueue
              - Arn
  CookDish:
    handler: handler.cook_dishes
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CookDishQueue
              - Arn
  ReplyTweet:
    handler: handler.reply_tweets
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ReplyTweetQueue
              - Arn
    environment:
      OAUTH_ACCESS_TOKEN: ${env:OAUTH_ACCESS_TOKEN}
      OAUTH_ACCESS_TOKEN_SECRET: ${env:OAUTH_ACCESS_TOKEN_SECRET}

stepFunctions:
  stateMachines:
    Chef:
      id: Chef
      name: Chef
      definition:
        Comment: "Workflow for cooking orders from a batch request in parallel and executing a reply action"
        StartAt: CookingOrder
        States:
          CookingOrder:
            Type: Map
            MaxConcurrency: 0
            ItemsPath: $.dishes
            Iterator:
              StartAt: DownloadingIngredients
              States:
                DownloadingIngredients:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  Parameters:
                    QueueUrl:
                      Ref: DownloadIngredientsQueue
                    MessageBody:
                      orderId.$: $.orderId
                      urls.$: $.urls
                      taskToken.$: $$.Task.Token
                  ResultPath: $.keys
                  Next: CookingDish
                CookingDish:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  Parameters:
                    QueueUrl:
                      Ref: CookDishQueue
                    MessageBody:
                      orderId.$: $.orderId
                      ingredients.$: $.ingredients
                      recipe.$: $.recipe
                      season.$: $.season
                      keys.$: $.keys
                      taskToken.$: $$.Task.Token
                  ResultPath: $.keys
                  End: true
            Next: OrderUp
          OrderUp:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl:
                Ref: ServeOrderQueue
              MessageBody:
                keys.$: $.keys
                orderId.$: $.orderId
                table.$: $.table
            End: true
  validate: true # enable pre-deployment definition validation (disabled by default

# you can add CloudFormation resource templates here
resources:
  Resources:
    DownloadIngredientsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: DownloadIngredientsQueue
    CookDishQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: CookDishQueue
    ServeOrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ServeOrderQueue
    TweetOrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TweetOrderTable
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
          - AttributeName: authorId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    ChefArn:
      Description: "The ARN of the Chef StateMachine"
      Value:
        Ref: Chef

plugins:
  - serverless-python-requirements
  - serverless-step-functions

custom:
  pythonRequirements:
    dockerizePip: non-linux