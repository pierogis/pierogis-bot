service: pierogis-bot
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

useDotenv: true

provider:
  name: aws
  runtime: python3.8
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:PutObject'
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${env:ORDERS_BUCKET}
            - "/*"
    - Effect: 'Allow'
      Action:
        - 'states:SendTaskSuccess'
        - 'states:StartExecution'
      Resource:
        Ref: Kitchen
    - Effect: 'Allow'
      Action:
        - 'dynamodb:GetItem'
        - 'dynamodb:BatchWriteItem'
      Resource:
        Fn::GetAtt: [ OrdersTable, Arn ]
    - Effect: 'Allow'
      Action:
        - 'ssm:GetParameter'
        - 'ssm:PutParameter'
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter"
            - "/pierogis/chef/sinceId"
  deploymentBucket:
    name: ${env:ORDERS_BUCKET}
  environment:
    OAUTH_CONSUMER_KEY: ${env:OAUTH_CONSUMER_KEY}
    OAUTH_CONSUMER_SECRET: ${env:OAUTH_CONSUMER_SECRET}
    BEARER_TOKEN: ${env:BEARER_TOKEN}
    ORDERS_BUCKET: ${env:ORDERS_BUCKET}

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  PollMentions:
    handler: handler.poll_mentions
    events:
      - schedule: rate(1 hour)
    environment:
      KITCHEN_ARN:
        Ref: Kitchen
      USER_ID: ${env:USER_ID}
      ORDERS_TABLE:
        Ref: OrdersTable
  DownloadIngredients:
    handler: handler.download_ingredients
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DownloadIngredientsQueue
              - Arn
  CookDish:
    handler: handler.cook_dishes
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CookDishQueue
              - Arn
  ReplyTweet:
    handler: handler.reply_tweets
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ServeOrderQueue
              - Arn
    environment:
      OAUTH_ACCESS_TOKEN: ${env:OAUTH_ACCESS_TOKEN}
      OAUTH_ACCESS_TOKEN_SECRET: ${env:OAUTH_ACCESS_TOKEN_SECRET}
      ORDERS_TABLE: ${env:ORDERS_TABLE}

stepFunctions:
  stateMachines:
    Kitchen:
      id: Kitchen
      name: Kitchen
      definition:
        Comment: "Workflow for cooking orders from a batch request in parallel and executing a reply action"
        StartAt: CookingOrder
        States:
          CookingOrder:
            Type: Map
            MaxConcurrency: 0
            ItemsPath: $.dishes
            Iterator:
              StartAt: DownloadingIngredients
              States:
                DownloadingIngredients:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  Parameters:
                    QueueUrl:
                      Ref: DownloadIngredientsQueue
                    MessageBody:
                      orderId.$: $.orderId
                      fileLinks.$: $.fileLinks
                      taskToken.$: $$.Task.Token
                  ResultPath: $.fileLinks
                  Next: CookingDish
                CookingDish:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  Parameters:
                    QueueUrl:
                      Ref: CookDishQueue
                    MessageBody:
                      orderId.$: $.orderId
                      ingredients.$: $.ingredients
                      recipes.$: $.recipes
                      seasoningLinks.$: $.seasoningLinks
                      fileLinks.$: $.fileLinks
                      taskToken.$: $$.Task.Token
                  End: true
            ResultPath: $.keys
            Next: OrderUp
          OrderUp:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage
            Parameters:
              QueueUrl:
                Ref: ServeOrderQueue
              MessageBody:
                keys.$: $.keys
                orderId.$: $.orderId
                replyType.$: $.replyType
            End: true
  validate: true # enable pre-deployment definition validation (disabled by default

# you can add CloudFormation resource templates here
resources:
  Resources:
    DownloadIngredientsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: DownloadIngredientsQueue
    CookDishQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: CookDishQueue
    ServeOrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ServeOrderQueue
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrdersTable
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: replyType
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
          - AttributeName: replyType
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-python-requirements
  - serverless-step-functions

custom:
  pythonRequirements:
    dockerizePip: non-linux